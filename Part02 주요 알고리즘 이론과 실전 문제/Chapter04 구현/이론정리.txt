<구현>

피지컬로 승부하기
코딩테스트에서 구현(Implementation)이란 ‘머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정’
구현 문제 유형은 모든 범위의 코딩 테스트 문제 유형을 포함하는 개념
생각해낸 문제 풀이 방법을 우리가 원하는 프로그래밍 언어로 정확히 구현해냈을 때 비로소 정답 처리를 받음

problem - thinking - solution

‘풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제’
흔히 개발할 때 프로그래밍 언어의 문법에 능숙하고 코드 작성 속도(타자)가 빠른 사람을 보고 ‘피지컬이 좋다’라고 이야기하는데, 구현 유형의 문제는 그런 의미에서 ‘피지컬을 요구하는’ 문제

까다로운 구현 유형의 문제
알고리즘은 간단한데 코드가 지나칠 만큼 길어지는 문제
문자열이 입력으로 주어졌을 때 한 문자 단위로 끊어서 리스트에 넣어야 하는(파싱을 해야 하는) 문제 등

사소한 조건 설정이 많은 문제일수록 코드로 구현하기가 까다로움

완전탐색: 모든 경우의 수를 주저 없이 다 계산하는 해결 방법
시뮬레이션: 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행


구현 시 고려해야 할 메모리 제약 사항
파이썬에서는 프로그래머가 직접 자료형을 지정할 필요가 없으며 매우 큰 수의 연산 또한 기본적으로 지원
파이썬을 이용하는 사람이라면 자료형의 표현 범위 제한에 대해 깊게 이해하고 있지 않아도 괜찮음
다만, 파이썬에서의 실수형 변수는 다른 언어와 마찬가지로 유효숫자에 따라 연산 결과가 원하는 값이 나오지 않을 수 있다는 점을 기억


파이썬에서 리스트 크기
파이썬에서 여러 개의 변수를 사용할 때는 리스트를 이용
파이썬에서 리스트를 이용할 때 고려해야 할 사항: 코딩 테스트의 메모리 제한
int 자료형 데이터 개수에 따른 메모리 사용량
데이터의 개수(리스트의 길이)	메모리 사용량
1,000	약 4KB
1,000,000	약 4MB
10,000,000	약 40MB
파이썬은 다른 언어에 비해서 구현상의 복잡함이 적은 편이지만 데이터 처리량이 많을 때는 꼭 메모리 제한을 고려
일반적인 코딩 테스트 수준에서는 메모리 사용량 제한보다 더 적은 크기의 메모리를 사용해야 한다는 점 정도만 기억


채점 환경
문제에서 요구하는 메모리 제한과 실행 시간 제한은 코딩 테스트를 출제하는 기관마다, 문제마다 조금씩 다름
알고리즘 문제를 풀 때는 시간 제한과 데이터의 개수를 먼저 확인한 뒤에 이 문제를 어느정도 시간 복잡도의 알고리즘으로 작성해야 풀 수 있을 것인지 예측할 수 있어야 함


구현 문제에 접근하는 방법
보통 구현 유형의 문제는 사소한 입력 조건 등을 문제에서 명시해주며 문제의 길이가 꽤 긴 편
고차원적인 사고력을 요구하는 문제는 나오지 않는 편이라 문법에 익숙하다면 오히려 쉽게 풀 수 있음
Pypy3는 파이썬3의 문법을 그대로 지원하며, 대부분 파이썬3보다 실행 속도가 더 빠름
이 말은 코딩 테스트에서 Pypy3를 선택한다면 파이썬3와 동일한 코드를 제출해서 실행 시간을 줄일 수 있다는 의미
